/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 01 11:54:18 GMT 2018
 */

package server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import chat.Chat;
import chat.User;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import server.MessageListener;
import server.MessageQueue;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MessageListener_ESTest extends MessageListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MessageQueue messageQueue0 = new MessageQueue();
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      MockSocket mockSocket0 = new MockSocket();
      User user0 = new User(mockSocket0);
      user0.setChatID((-6));
      // Undeclared exception!
      try { 
        messageListener0.sendNewMessage(user0, "468%hFG[P3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("server.MessageListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      MessageListener messageListener0 = new MessageListener((MessageQueue) null, hashMap0);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      User user0 = new User(mockSocket0);
      // Undeclared exception!
      try { 
        messageListener0.sendNewMessage(user0, "(}:&l(}9IO84Ev)yq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("server.MessageListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MessageQueue messageQueue0 = new MessageQueue();
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      Integer integer0 = new Integer((-1));
      Chat chat0 = new Chat();
      hashMap0.put(integer0, chat0);
      User user0 = new User((Socket) null);
      // Undeclared exception!
      try { 
        messageListener0.sendNewMessage(user0, "/disconnect");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("chat.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MessageQueue messageQueue0 = new MessageQueue();
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      MockSocket mockSocket0 = new MockSocket();
      User user0 = new User(mockSocket0);
      // Undeclared exception!
      try { 
        messageListener0.sendNewMessage(user0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MessageQueue messageQueue0 = new MessageQueue();
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      Integer integer0 = new Integer(104);
      Chat chat0 = new Chat();
      User user0 = new User((Socket) null);
      user0.setLogin("/discunnect");
      chat0.addUser(user0);
      hashMap0.put(integer0, chat0);
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(104);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      User user1 = new User(mockSocket0);
      user1.setChatID(104);
      // Undeclared exception!
      try { 
        messageListener0.sendNewMessage(user1, "org.apache.log4j.or.ObjectRenderer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("chat.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MessageQueue messageQueue0 = new MessageQueue();
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      Integer integer0 = new Integer(104);
      Chat chat0 = new Chat();
      User user0 = new User((Socket) null);
      user0.setChatID(104);
      user0.setLogin("NEJ4Ya2");
      chat0.addUser(user0);
      hashMap0.put(integer0, chat0);
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      messageListener0.sendNewMessage(user0, "V46i[ZkyG;O%wq");
      assertEquals("NEJ4Ya2", user0.getLogin());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MessageQueue messageQueue0 = new MessageQueue();
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      User user0 = new User(mockSocket0);
      messageListener0.sendNewMessage(user0, ":");
      assertNull(user0.getLogin());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MessageQueue messageQueue0 = new MessageQueue();
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(104);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      User user0 = new User(mockSocket0);
      messageListener0.sendNewMessage(user0, "/select 0");
      assertEquals((-1), user0.getChatID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      MessageQueue messageQueue0 = new MessageQueue();
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((InetAddress) null, 0);
      Integer integer0 = new Integer(2);
      Chat chat0 = new Chat();
      hashMap0.put(integer0, chat0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      User user0 = new User(mockSocket0);
      messageListener0.sendNewMessage(user0, "/chats");
      assertEquals((-1), user0.getChatID());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MessageQueue messageQueue0 = new MessageQueue();
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      User user0 = new User(mockSocket0);
      messageListener0.sendNewMessage(user0, "/custom");
      assertEquals((-1), user0.getChatID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MessageQueue messageQueue0 = new MessageQueue();
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      User user0 = new User(mockSocket0);
      messageListener0.sendNewMessage(user0, "/help");
      assertNull(user0.getLogin());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      MessageQueue messageQueue0 = new MessageQueue();
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((InetAddress) null, 0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      User user0 = new User(mockSocket0);
      messageListener0.sendNewMessage(user0, "/select d+");
      assertEquals((-1), user0.getChatID());
  }
}
