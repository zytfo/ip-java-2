/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 01 11:55:25 GMT 2018
 */

package chat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import chat.Message;
import java.io.DataOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Message_ESTest extends Message_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DataOutputStream dataOutputStream0 = mock(DataOutputStream.class, new ViolatedAssumptionAnswer());
      Message message0 = new Message((String) null, dataOutputStream0);
      String string0 = message0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DataOutputStream dataOutputStream0 = mock(DataOutputStream.class, new ViolatedAssumptionAnswer());
      Message message0 = new Message("#qG,kc7/j`u", dataOutputStream0);
      String string0 = message0.getText();
      assertEquals("#qG,kc7/j`u", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Message message0 = new Message("", (DataOutputStream) null);
      DataOutputStream dataOutputStream0 = message0.getDataOutputStream();
      assertNull(dataOutputStream0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DataOutputStream dataOutputStream0 = mock(DataOutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dataOutputStream0).toString();
      Message message0 = new Message("", dataOutputStream0);
      DataOutputStream dataOutputStream1 = message0.getDataOutputStream();
      assertSame(dataOutputStream1, dataOutputStream0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DataOutputStream dataOutputStream0 = mock(DataOutputStream.class, new ViolatedAssumptionAnswer());
      Message message0 = new Message("", dataOutputStream0);
      String string0 = message0.getText();
      assertEquals("", string0);
  }
}
