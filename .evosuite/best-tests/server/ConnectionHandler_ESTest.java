/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 01 11:50:03 GMT 2018
 */

package server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.junit.runner.RunWith;
import server.ConnectionHandler;
import server.ConnectionListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConnectionHandler_ESTest extends ConnectionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      ServerSocket serverSocket0 = mock(ServerSocket.class, new ViolatedAssumptionAnswer());
      doReturn((Socket) null).when(serverSocket0).accept();
      ConnectionHandler connectionHandler0 = new ConnectionHandler(serverSocket0);
      ConnectionHandler.ConnectionHandlerWorker connectionHandler_ConnectionHandlerWorker0 = connectionHandler0.new ConnectionHandlerWorker();
      // Undeclared exception!
      try { 
        connectionHandler_ConnectionHandlerWorker0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("server.ConnectionHandler$ConnectionHandlerWorker", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ServerSocket serverSocket0 = mock(ServerSocket.class, new ViolatedAssumptionAnswer());
      ConnectionHandler connectionHandler0 = new ConnectionHandler(serverSocket0);
      connectionHandler0.startAccepting();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockServerSocket mockServerSocket0 = new MockServerSocket();
      ConnectionHandler connectionHandler0 = new ConnectionHandler(mockServerSocket0);
      ConnectionHandler.ConnectionHandlerWorker connectionHandler_ConnectionHandlerWorker0 = connectionHandler0.new ConnectionHandlerWorker();
      connectionHandler_ConnectionHandlerWorker0.run();
      assertTrue(mockServerSocket0.isClosed());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockServerSocket mockServerSocket0 = new MockServerSocket(36, 36, inetAddress0);
      ConnectionHandler connectionHandler0 = new ConnectionHandler(mockServerSocket0);
      ConnectionListener connectionListener0 = mock(ConnectionListener.class, new ViolatedAssumptionAnswer());
      connectionHandler0.setConnectionListener(connectionListener0);
      connectionHandler0.startAccepting();
      assertTrue(mockServerSocket0.isClosed());
  }
}
