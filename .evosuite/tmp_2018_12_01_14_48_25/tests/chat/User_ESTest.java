/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 01 11:50:25 GMT 2018
 */

package chat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import chat.User;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Proxy;
import java.net.Socket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      User user0 = new User(mockSocket0);
      user0.setLogin("");
      user0.getLogin();
      assertEquals((-1), user0.getChatID());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      User user0 = new User(mockSocket0);
      user0.getDataOutputStream();
      assertEquals((-1), user0.getChatID());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      User user0 = new User(mockSocket0);
      user0.getDataInputStream();
      assertEquals((-1), user0.getChatID());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      User user0 = new User(mockSocket0);
      assertEquals((-1), user0.getChatID());
      
      user0.setChatID(0);
      int int0 = user0.getChatID();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User user0 = new User((Socket) null);
      // Undeclared exception!
      try { 
        user0.getDataOutputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("chat.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = new User((Socket) null);
      // Undeclared exception!
      try { 
        user0.getDataInputStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("chat.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User user0 = new User((Socket) null);
      // Undeclared exception!
      try { 
        user0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("chat.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(socket0).getOutputStream();
      User user0 = new User(socket0);
      user0.getDataOutputStream();
      DataOutputStream dataOutputStream0 = user0.getDataOutputStream();
      assertNotNull(dataOutputStream0);
      assertEquals((-1), user0.getChatID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Socket socket0 = mock(Socket.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(socket0).getInputStream();
      User user0 = new User(socket0);
      user0.getDataInputStream();
      DataInputStream dataInputStream0 = user0.getDataInputStream();
      assertEquals((-1), user0.getChatID());
      assertNotNull(dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      User user0 = new User(mockSocket0);
      user0.closeConnection();
      assertEquals((-1), user0.getChatID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      User user0 = new User(mockSocket0);
      int int0 = user0.getChatID();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      User user0 = new User(mockSocket0);
      user0.setLogin(";,f|+HS2");
      user0.getLogin();
      assertEquals((-1), user0.getChatID());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      User user0 = new User(mockSocket0);
      user0.getLogin();
      assertEquals((-1), user0.getChatID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      User user0 = new User(mockSocket0);
      user0.setChatID(7);
      int int0 = user0.getChatID();
      assertEquals(7, int0);
  }
}
