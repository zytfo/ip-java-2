/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 01 11:55:35 GMT 2018
 */

package server;

import org.junit.Test;
import static org.junit.Assert.*;
import chat.Chat;
import chat.User;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import server.MessageHandler;
import server.MessageListener;
import server.MessageQueue;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MessageHandler_ESTest extends MessageHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MessageHandler messageHandler0 = new MessageHandler();
      MockSocket mockSocket0 = new MockSocket();
      User user0 = new User(mockSocket0);
      MessageHandler.MessageHandlerWorker messageHandler_MessageHandlerWorker0 = messageHandler0.new MessageHandlerWorker(user0);
      messageHandler_MessageHandlerWorker0.run();
      assertTrue(mockSocket0.isClosed());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MessageHandler messageHandler0 = new MessageHandler();
      MockSocket mockSocket0 = new MockSocket();
      User user0 = new User(mockSocket0);
      messageHandler0.startAccepting(user0);
      assertEquals((-1), user0.getChatID());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MessageHandler messageHandler0 = new MessageHandler();
      MessageQueue messageQueue0 = new MessageQueue();
      HashMap<Integer, Chat> hashMap0 = new HashMap<Integer, Chat>();
      MessageListener messageListener0 = new MessageListener(messageQueue0, hashMap0);
      messageHandler0.setMessageListener(messageListener0);
  }
}
